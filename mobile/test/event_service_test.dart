import 'dart:convert';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart' as http; // Keep for http.Response type
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

// Adjust relative paths based on your actual project structure
// Assuming tests are in 'test/api/services/' and code is in 'lib/api/...
import '../../mobile/lib/api/services/event_service.dart';
import '../../mobile/lib/api/api_client.dart';
import '../../mobile/lib/api/models/evento.dart'; // Import the updated Evento model

// Import generated mocks for THIS test file ONLY
// IMPORTANT: Run `flutter pub run build_runner build --delete-conflicting-outputs` in your terminal
import 'campo_service_test.mocks.dart';

// Generate mocks for ApiClient
@GenerateMocks([ApiClient])
void main() {
  // Mocks and service instances
  late MockApiClient mockApiClient; // This class is generated by build_runner
  late EventService eventService;

  // Test data setup using the updated Evento model
  final now = DateTime.now();
  final eventoModel = Evento(
    id: 'evento-123',
    nome: 'Evento de Teste',
    dataInicio: now,
    dataFim: now.add(const Duration(days: 1)),
    local: 'Local Teste',
    descricao: 'Descrição do evento',
    formulariosAssociados: [],
    recrutadoresEnvolvidos: [],
    administradoresEnvolvidos: [],
    status: 'ATIVO',
    // adminId: null, // Optional
  );
  final eventoId = eventoModel.id;
  // Use the model's toJson for consistency in mocked responses
  final eventoJson = json.encode(eventoModel.toJson());

  setUp(() {
    // Instantiate the MOCK ApiClient (Generated Class)
    mockApiClient = MockApiClient();
    // Instantiate the service with the MOCKED ApiClient
    eventService = EventService(mockApiClient);
  });

  group('EventService Tests', () {
    // --- Test: obterEventoPorId --- (Matches service method)
    test('obterEventoPorId com sucesso deve retornar Evento', () async {
      // Arrange
      final endpoint = '/eventos/$eventoId'; // Path used in service
      // Mock the ApiClient's get method
      when(
        mockApiClient.get(endpoint),
      ).thenAnswer((_) async => http.Response(eventoJson, 200));

      // Act
      final result = await eventService.obterEventoPorId(eventoId);

      // Assert
      expect(result, isA<Evento>());
      expect(result.id, eventoId);
      expect(result.nome, eventoModel.nome);
      verify(mockApiClient.get(endpoint)).called(1);
    });

    test(
      'obterEventoPorId com ID inexistente deve lançar ApiException',
      () async {
        // Arrange
        final nonExistentId = 'evento-999';
        final endpoint = '/eventos/$nonExistentId';
        final errorJson = '{"message": "Evento não encontrado"}';
        // Mock the ApiClient's get method to return non-200 status
        when(
          mockApiClient.get(endpoint),
        ).thenAnswer((_) async => http.Response(errorJson, 404));

        // Act & Assert
        expect(
          () async => await eventService.obterEventoPorId(nonExistentId),
          throwsA(isA<Exception>()), // Service throws ApiException
        );
        verify(mockApiClient.get(endpoint)).called(1);
      },
    );

    // --- Test: criarEvento --- (Matches service method)
    test('criarEvento com sucesso deve retornar Evento criado', () async {
      // Arrange
      final endpoint = '/eventos/criar'; // Path used in service
      // Create data for the new event (without ID, assuming backend generates it)
      final newEventoData = Evento(
        id: '', // ID likely ignored by backend when creating
        nome: 'Novo Evento',
        dataInicio: now.add(const Duration(days: 2)),
        dataFim: now.add(const Duration(days: 3)),
        local: 'Novo Local',
        descricao: 'Descrição Nova',
        formulariosAssociados: [],
        recrutadoresEnvolvidos: [],
        administradoresEnvolvidos: [],
        status: 'PLANEJADO',
      );
      final requestBodyMap = newEventoData.toJson(); // Body sent to API
      // Mocked response (assuming API returns the created event with an ID)
      final createdEventoModel = newEventoData.copyWith(id: 'evento-456');
      final createdEventoJson = json.encode(createdEventoModel.toJson());

      // Mock the ApiClient's post method
      when(
        mockApiClient.post(
          endpoint,
          body:
              requestBodyMap, // Pass the map directly if ApiClient handles encoding
        ),
      ).thenAnswer(
        (_) async => http.Response(createdEventoJson, 201),
      ); // Expect 201 Created

      // Act
      final result = await eventService.criarEvento(newEventoData);

      // Assert
      expect(result, isA<Evento>());
      expect(result.id, 'evento-456'); // Check against the mocked response ID
      expect(result.nome, 'Novo Evento');
      verify(mockApiClient.post(endpoint, body: requestBodyMap)).called(1);
    });

    // --- Test: listarEventos --- (Matches service method)
    test('listarEventos com sucesso deve retornar List<Evento>', () async {
      // Arrange
      final endpoint = '/eventos'; // Path used in service
      final eventoList = [
        eventoModel,
        eventoModel.copyWith(id: 'evento-789', nome: 'Outro Evento'),
      ];
      final listJson = json.encode(eventoList.map((e) => e.toJson()).toList());

      // Mock the ApiClient's get method
      when(
        mockApiClient.get(endpoint),
      ).thenAnswer((_) async => http.Response(listJson, 200));

      // Act
      final result = await eventService.listarEventos();

      // Assert
      expect(result, isA<List<Evento>>());
      expect(result.length, 2);
      expect(result[0].id, eventoId);
      expect(result[1].nome, 'Outro Evento');
      verify(mockApiClient.get(endpoint)).called(1);
    });

    // --- Test: atualizarEvento --- (Matches service method)
    test('atualizarEvento com sucesso deve retornar Evento atualizado',
        () async {
      // Arrange
      // IMPORTANT: Service uses hardcoded '/eventos/alterar/{eventoId}' path!
      // The test will mock this specific path, ignoring the passed 'id' parameter for the path itself.
      final endpoint = '/eventos/alterar/{eventoId}';
      final updatedEventoData = eventoModel.copyWith(
        nome: 'Evento Atualizado',
        status: 'CONCLUIDO',
      );
      final requestBodyMap = updatedEventoData.toJson();
      final updatedEventoJson = json.encode(
        updatedEventoData.toJson(),
      ); // API returns the updated object

      // Mock the ApiClient's post method (service uses POST for update)
      when(
        mockApiClient.post(endpoint, body: requestBodyMap),
      ).thenAnswer((_) async => http.Response(updatedEventoJson, 200));

      // Act
      // Pass the actual ID and the updated data
      final result = await eventService.atualizarEvento(
        eventoId,
        updatedEventoData,
      );

      // Assert
      expect(result, isA<Evento>());
      expect(result.id, eventoId); // Should still have the original ID
      expect(result.nome, 'Evento Atualizado');
      expect(result.status, 'CONCLUIDO');
      verify(mockApiClient.post(endpoint, body: requestBodyMap)).called(1);
    });

    // --- Test: removerEvento --- (Matches service method)
    test(
      'removerEvento com sucesso não deve lançar exceção (status 200/204)',
      () async {
        // Arrange
        final endpoint = '/eventos/remove/$eventoId'; // Path used in service
        // Mock the ApiClient's delete method
        when(mockApiClient.delete(endpoint)).thenAnswer(
          (_) async => http.Response('', 204),
        ); // Expect 204 No Content (common for delete)

        // Act & Assert
        await expectLater(eventService.removerEvento(eventoId), completes);
        verify(mockApiClient.delete(endpoint)).called(1);
      },
    );

    test('removerEvento com falha deve lançar ApiException', () async {
      // Arrange
      final endpoint = '/eventos/remove/$eventoId';
      final errorJson = '{"message": "Erro ao remover"}';
      // Mock the ApiClient's delete method to return non-200/204 status
      when(
        mockApiClient.delete(endpoint),
      ).thenAnswer((_) async => http.Response(errorJson, 500));

      // Act & Assert
      expect(
        () async => await eventService.removerEvento(eventoId),
        throwsA(isA<Exception>()), // Service throws ApiException
      );
      verify(mockApiClient.delete(endpoint)).called(1);
    });
  });
}
