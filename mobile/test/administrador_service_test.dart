import 'dart:convert';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart' as http; // Keep for http.Response type
import 'package:mockito/annotations.dart' show GenerateMocks;
import 'package:mockito/mockito.dart';

// Adjust relative paths based on your actual project structure
// Assuming tests are in 'test/api/services/' and code is in 'lib/api/...
import '../../mobile/lib/api/services/administrador_service.dart';
import '../../mobile/lib/api/api_client.dart';
import '../../mobile/lib/api/models/administrador.dart';
// Assuming Endpoints class exists in the api directory
// You might need to create a mock or simple version of Endpoints for the test
// if it's complex or has external dependencies.
// For simplicity, we'll assume it provides static strings/methods.
import '../../mobile/lib/api/endpoints.dart';

// Import generated mocks for THIS test file ONLY
// IMPORTANT: Run `flutter pub run build_runner build --delete-conflicting-outputs` in your terminal
import 'campo_service_test.mocks.dart';

// Generate mocks ONLY for ApiClient, NOT its internal dependencies (http.Client, SharedPreferences)
@GenerateMocks([ApiClient])
void main() {
  // Mocks and service instances
  late MockApiClient mockApiClient; // This class is generated by build_runner
  late AdministradorService administradorService;

  // Test data setup using the updated Administrador model
  final adminModel = Administrador(
    usuarioId: 'admin-123',
    nome: 'Admin Teste',
    telefone: '11999998888',
    email: 'admin.teste@example.com',
    token: 'fake-jwt-token',
    recrutadores: [],
    formularios: [],
    eventos: [],
  );
  final adminId = adminModel.usuarioId;
  final adminJson = json.encode(adminModel.toJson());

  setUp(() {
    // Instantiate the MOCK ApiClient (Generated Class)
    mockApiClient = MockApiClient();
    // Instantiate the service with the MOCKED ApiClient
    // NO need to mock http.Client or SharedPreferences here
    administradorService = AdministradorService(mockApiClient);
  });

  group('AdministradorService Tests', () {
    // --- Test: obterPorId --- (Matches service method)
    test('obterPorId com sucesso deve retornar Administrador', () async {
      // Arrange
      // Assume Endpoints.administradores is the base path like '/administradores'
      final endpoint = '${Endpoints.administradores}/$adminId';
      // Mock the ApiClient's get method directly
      when(mockApiClient.get(endpoint))
          .thenAnswer((_) async => http.Response(adminJson, 200));

      // Act
      final result = await administradorService.obterPorId(adminId);

      // Assert
      expect(result, isA<Administrador>());
      expect(result.usuarioId, adminId);
      expect(result.nome, adminModel.nome);
      expect(result.token, adminModel.token);
      verify(mockApiClient.get(endpoint)).called(1);
    });

    test('obterPorId com ID inexistente deve lançar Exception', () async {
      // Arrange
      final nonExistentId = 'admin-999';
      final endpoint = '${Endpoints.administradores}/$nonExistentId';
      final errorJson = '{"message": "Administrador não encontrado"}';
      // Mock the ApiClient's get method to return non-200 status
      when(mockApiClient.get(endpoint))
          .thenAnswer((_) async => http.Response(errorJson, 404));

      // Act & Assert
      expect(
        () async => await administradorService.obterPorId(nonExistentId),
        throwsA(isA<Exception>()), // Service throws generic Exception
      );
      verify(mockApiClient.get(endpoint)).called(1);
    });

    // --- Test: criarAdministrador --- (Matches service method)
    test('criarAdministrador com sucesso deve retornar Administrador criado',
        () async {
      // Arrange
      // Assume Endpoints.administradores is the base path for creation
      final endpoint = Endpoints.administradores;
      // Data for the new admin
      final newAdminData = Administrador(
        usuarioId: '', // ID likely ignored by backend
        nome: 'Novo Admin',
        telefone: '11777776666',
        email: 'novo.admin@example.com',
        senha: 'password123', // Include password if needed for creation
      );
      final requestBody =
          json.encode(newAdminData.toJson()); // Service encodes the object
      // Mocked response (assuming API returns the created admin with an ID)
      final createdAdminModel =
          newAdminData.copyWith(usuarioId: 'admin-456', token: 'new-token');
      final createdAdminJson = json.encode(createdAdminModel.toJson());

      // Mock the ApiClient's post method directly
      when(mockApiClient.post(
        endpoint,
        body: requestBody,
      )).thenAnswer((_) async =>
          http.Response(createdAdminJson, 201)); // Expect 201 Created

      // Act
      final result =
          await administradorService.criarAdministrador(newAdminData);

      // Assert
      expect(result, isA<Administrador>());
      expect(result.usuarioId,
          'admin-456'); // Check against the mocked response ID
      expect(result.nome, 'Novo Admin');
      expect(result.token, 'new-token');
      verify(mockApiClient.post(endpoint, body: requestBody)).called(1);
    });

    // --- Test: removerAdministrador --- (Matches service method)
    test(
        'removerAdministrador com sucesso não deve lançar exceção (status 200/204)',
        () async {
      // Arrange
      // Assume Endpoints.removerAdministrador(id) generates the correct path
      final endpoint = Endpoints.removerAdministrador(adminId);
      // Mock the ApiClient's delete method directly
      when(mockApiClient.delete(endpoint)).thenAnswer(
          (_) async => http.Response('', 204)); // Expect 204 No Content

      // Act & Assert
      await expectLater(
          administradorService.removerAdministrador(adminId), completes);
      verify(mockApiClient.delete(endpoint)).called(1);
    });

    test('removerAdministrador com falha deve lançar Exception', () async {
      // Arrange
      final endpoint = Endpoints.removerAdministrador(adminId);
      final errorJson = '{"message": "Erro ao remover"}';
      // Mock the ApiClient's delete method to return non-200/204 status
      when(mockApiClient.delete(endpoint))
          .thenAnswer((_) async => http.Response(errorJson, 500));

      // Act & Assert
      expect(
        () async => await administradorService.removerAdministrador(adminId),
        throwsA(isA<Exception>()), // Service throws generic Exception
      );
      verify(mockApiClient.delete(endpoint)).called(1);
    });

    // Add tests for other methods if they exist in AdministradorService
    // e.g., atualizarAdministrador, listarAdministradores, login, alterarSenha
    // following the same pattern: mock the corresponding mockApiClient method.
  });
}
